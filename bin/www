#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('03:server');
var http = require('http');
var socket = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4200');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


// Socket.io
var io = socket(server);
var connections = [];
var online_users = [];

io.on('connection', function(socket){
  //console.log('Socket connection up of id: ', socket.id);

  socket.on('online', function(data){
    if (!online_users.includes(data.username))
      online_users.push(data.username);
    socket.username = data.username;
    
    io.sockets.emit('online', online_users);
  });

  socket.on('disconnect', function(){
    if (!socket.username) return ;
    online_users.splice(online_users.indexOf(socket.username), 1);

    io.sockets.emit('online', online_users);
    console.log('User disconnected@: ', socket.username);
  });

  socket.on('send_chat_message', function(data){
    io.sockets.emit('send_chat_message', data);
  });

  //console.log('hit');
})